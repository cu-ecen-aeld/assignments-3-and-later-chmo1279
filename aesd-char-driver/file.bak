/**
 * @file aesd-circular-buffer.c
 * @brief Functions and data related to a circular buffer imlementation
 *
 * @author Dan Walkes
 * @date 2020-03-01
 * @copyright Copyright (c) 2020
 *
 */

#include <syslog.h>
#include <stdlib.h>
#include <string.h>

#ifdef __KERNEL__
#include <linux/string.h>
#else
#include <string.h>
#endif

#include "aesd-circular-buffer.h"

// struct aesd_buffer_entry
// {
//     const char *buffptr; //A location where the buffer contents in buffptr are stored
//     
//     size_t size; //Number of bytes stored in buffptr
// };
// 
// struct aesd_circular_buffer
// {
//     struct aesd_buffer_entry  entry[AESDCHAR_MAX_WRITE_OPERATIONS_SUPPORTED];
//          An array of pointers to memory allocated for the most recent write operations
//     
//     uint8_t in_offs; //The current location in the entry structure where the next write should be stored (max value 255)
//     
//     uint8_t out_offs; //The first location in the entry structure to read from (max value 255)
//     
//     bool full; //set to true when the buffer entry structure is full

// };

/**
* Adds entry @param add_entry to @param buffer in the location specified in buffer->in_offs.
* If the buffer was already full, overwrites the oldest entry and advances buffer->out_offs to the
* new start location.
* Any necessary locking must be handled by the caller
* Any memory referenced in @param add_entry must be allocated by and/or must have a lifetime managed by the caller.
*/
void aesd_circular_buffer_add_entry(struct aesd_circular_buffer *buffer,
                                    const struct aesd_buffer_entry *add_entry)
{
    /**
    * TODO: implement per description
    */
    buffer->entry[buffer->in_offs] = *add_entry; //add entry *add_entry to *buffer at index buffer.in_offs
    syslog(LOG_DEBUG, "string at index number %d is: %s", buffer->in_offs, buffer->entry[buffer->in_offs].buffptr);//#debug: show string just added to buffer 
    
    buffer->in_offs++;  //increment write index
    syslog(LOG_DEBUG, "index incremented to %d", buffer->in_offs);//#debug: check if index is properly incrementing
    
    if (buffer->in_offs > AESDCHAR_MAX_WRITE_OPERATIONS_SUPPORTED) {
        buffer->full = true; 
        buffer->in_offs = 1; //Looping to the first position of the buffer 
    }
}

/**
 *  Finds entry offset for byte position in buffer 
 *   Any necessary locking must be performed by caller.
 */

struct aesd_buffer_entry return_struct; 
struct aesd_buffer_entry *aesd_circular_buffer_find_entry_offset_for_fpos(//fpos: byte position in buffer
                            struct aesd_circular_buffer *buffer, //target buffer to search for corresponding offset.
                            size_t char_offset, //position to search for in buffer list, describing the zero reference character index if all buffer strings were concatenated end to end (start position?)
                            size_t *entry_offset_byte_rtn )//pointer specifying a location to store the byte of the returned aesd_buffer_entry buffptr member corresponding to char_offset. Only set when a matching char_offset is found in buffer.
{
    /**
    * TODO: implement per description
    */
//    struct aesd_buffer_entry aesd_buffer_entry_rtn;
//    aesd_buffer_entry_rtn = buffer->entry[(int)char_offset];
    char *cat_buff = calloc(10, sizeof buffer->entry->buffptr); //buffer for all entries concatinated together
    char *entry_buff_out = malloc(sizeof buffer->entry->buffptr); //buffer for offset entries concatinated together

    uint8_t index;
//    struct aesd_circular_buffer buffer;
    struct aesd_buffer_entry *entry;

    AESD_CIRCULAR_BUFFER_FOREACH(entry,&buffer,index){
        if (index == 0){
            strcpy(cat_buff, entry->buffptr);
        }
        strcat(cat_buff, entry->buffptr);    
    }
    
    syslog(LOG_DEBUG, "cat_buff be like: %s", cat_buff);
    
    if (char_offset <= sizeof cat_buff && char_offset >= 0){
        struct aesd_buffer_entry *aesd_buffer_entry_rtn = malloc(sizeof *aesd_buffer_entry_rtn);
        int i = char_offset;
        while (cat_buff[i] != '\n') {
            entry_buff_out[i] = cat_buff[i];
            i++;
        }
        entry_buff_out[i] = '\n';
        syslog(LOG_DEBUG, "entry_out_buff be like: %s", entry_buff_out);
        syslog(LOG_DEBUG, "entry_buff_out is %ld long", sizeof entry_buff_out);
//        strcpy((char * restrict)aesd_buffer_entry_rtn->buffptr, (char * restrict)entry_buff_out);
        aesd_buffer_entry_rtn->buffptr = entry_buff_out;
        syslog(LOG_DEBUG, "aesd_buffer_entry_rtn->buffptr is %s", aesd_buffer_entry_rtn->buffptr);
        aesd_buffer_entry_rtn->size = sizeof aesd_buffer_entry_rtn->buffptr - 1; 
        free(cat_buff); 
        free(entry_buff_out); 
        return_struct.buffptr = aesd_buffer_entry_rtn->buffptr;
        return_struct.size = aesd_buffer_entry_rtn->size;
        free(aesd_buffer_entry_rtn);
        syslog(LOG_DEBUG, "return_struct.buffptr is %s", return_struct.buffptr);
        return &return_struct;//return the struct aesd_buffer_entry which represents the location described by char_offset, or
    } else
        return NULL;//return NULL if this position is not available in the buffer (not enough data is written).
    
}

/**
* Initializes the circular buffer described by @param buffer to an empty struct
*/
void aesd_circular_buffer_init(struct aesd_circular_buffer *buffer)
{
    memset(buffer,0,sizeof(struct aesd_circular_buffer));
}
