#include "threading.h"
#include <pthread.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>

// Optional: use these functions to add debug or error prints to your application
#define DEBUG_LOG(msg,...)
//#define DEBUG_LOG(msg,...) printf("threading: " msg "\n" , ##__VA_ARGS__)
#define ERROR_LOG(msg,...) printf("threading ERROR: " msg "\n" , ##__VA_ARGS__)

void* threadfunc(void* thread_param)
{
    
    // TODO: wait, obtain mutex, wait, release mutex as described by thread_data structure
    // hint: use a cast like the one below to obtain thread arguments from your parameter
    //struct thread_data* thread_func_args = (struct thread_data *) thread_param;
    struct thread_data* thread_func_args =  (struct thread_data *) thread_param;
    usleep((thread_func_args->wait_to_obtain_ms) * 1000); //wait in microseconds (*1000 for ms)
    pthread_mutex_lock(&thread_func_args->mutex);    
    usleep((thread_func_args->wait_to_release_ms) * 1000);
    pthread_mutex_unlock(&thread_func_args->mutex);    
    thread_func_args->thread_complete_success = true;
    return (bool *)true;
}


bool start_thread_obtaining_mutex(pthread_t *thread, pthread_mutex_t *mutex,int wait_to_obtain_ms, int wait_to_release_ms)
{
    /**
     * TODO: allocate memory for thread_data, setup mutex and wait arguments, pass thread_data to created thread
     * using threadfunc() as entry point.
     *
     * return true if successful.
     *
     * See implementation details in threading.h file comment block
     */
    struct thread_data *thread_data_Ptr = (struct thread_data*) malloc(sizeof(*thread_data_Ptr));
    pthread_mutex_init(&thread_data_Ptr->mutex, NULL);
    thread_data_Ptr->wait_to_obtain_ms = wait_to_obtain_ms; // wait time pass (in ms)
    thread_data_Ptr->wait_to_release_ms = wait_to_release_ms; // wait time pass (in ms)
    
    pthread_create(thread, NULL, &threadfunc, (void *)thread_data_Ptr); //thread spawn


//    pthread_join(*thread, NULL);
    const char * vOut = thread_data_Ptr->thread_complete_success ? "true" : "false";
    printf((char *)vOut);
    return thread_data_Ptr->thread_complete_success;
}

